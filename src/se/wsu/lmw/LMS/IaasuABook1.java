 
package se.wsu.lmw.LMS;

import se.wsu.lmw.Database.DB;
import se.wsu.lmw.Controls.Date.Date1;
import java.sql.ResultSet;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author imashi
 */
public class IaasuABook1 extends javax.swing.JPanel {

    String Librian;
    String LID;
    int max;
    int id;
    String MID = "no";
    String MemberName;
    String BookName;
    String BID = "no";
    int MaxBID;
    int MaxMID;
    int count = 0;

    /**
     * Creates new form IaasuABook
     */
    public IaasuABook1() {
        initComponents();
    }

    //setting Issue book id 
    public IaasuABook1(String LibrianName, String libID) {

        initComponents();

        Librian = LibrianName;
        LID = libID;
        jLabel6.setText(Librian);
        jLabel8.setText(LID);
        jLabel10.setText(Date1.myDate());
        jDateChooser1.setMinSelectableDate(new Date());

        try {

            ResultSet rs = DB.myConnection().createStatement().executeQuery("select max(BID) from borroewdid");
            while (rs.next()) {
                max = rs.getInt(1);
                id = max + 1;
                jTextField1.setText(Integer.toString(id));

            }

            loadBorrowedBooksTable();
            jTable1.setRowHeight(25);

        } catch (Exception e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel18 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setOpaque(false);

        jLabel18.setBackground(new java.awt.Color(255, 255, 204));
        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel18.setText("Issue a Book");
        jLabel18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0)));
        jLabel18.setOpaque(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Issue ID :");

        jTextField1.setEditable(false);

        jLabel2.setText("Member ID :");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Book ID :");

        jLabel3.setText("Due   date :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(139, 139, 139))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Issue ID", "Member ID", "Member Name", "Book ID", "Book Name", "Issued Date", "Due Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Librarian Name :");

        jLabel7.setText("Librarian ID :");

        jLabel9.setText("Date :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel7)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    //check book quantity

    public boolean checkQty() {
        int qty = 0;
        boolean quntity = false;
        try {

            ResultSet rs = DB.myConnection().createStatement().executeQuery("select * from book where BookID='" + jTextField3.getText() + "'");
            while (rs.next()) {
                qty = Integer.parseInt(rs.getString("AvailableQuentity"));
            }

        } catch (Exception e) {
            System.out.println("Exception @ Issue a book 260 ");
        }
        if (qty > 0) {
            quntity = true;
        }
        return quntity;
    }

    //load borrowed book info in to table
    private void loadBorrowedBooksTable() {
        DefaultTableModel dft = (DefaultTableModel) jTable1.getModel();
        dft.setRowCount(0);

        try {

            ResultSet rs = DB.myConnection().createStatement().executeQuery("select * from borrowedbooks order by BorrowedID ASC");
            while (rs.next()) {
                Vector borrow_book = new Vector();
                borrow_book.add(rs.getString("BorrowedID"));

                String memID = rs.getString("MemberID");
                int mm = Integer.parseInt(memID);
                borrow_book.add(memID);

                ResultSet rs1 = DB.myConnection().createStatement().executeQuery("select * from members where MemberID='" + mm + "'");

                while (rs1.next()) {

                    String Fname = (rs1.getString("MemberFirstName"));
                    String Mname = (rs1.getString("MemberMiddleName"));
                    String Sname = rs1.getString("MemberSurname");
                    String full = Fname + " " + Mname + " " + Sname;
                    borrow_book.add(full);

                }

                String bookid = rs.getString("BookID");

                int bID = Integer.parseInt(bookid);
                borrow_book.add(bookid);

                ResultSet rs2 = DB.myConnection().createStatement().executeQuery("select * from book where BookID='" + bID + "'");
                while (rs2.next()) {
                    borrow_book.add(rs2.getString("BookName"));
                }

                borrow_book.add(rs.getString("BurrowedDate"));
                borrow_book.add(rs.getString("ReturningDate"));

                dft.addRow(borrow_book);
            }
        } catch (Exception e) {
        }
    }
private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
    DefaultTableModel dft = (DefaultTableModel) jTable1.getModel();
    if (jTextField2.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "You Must Enter Member ID");
    } else {
        if (jTextField3.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "You Must Enter Book ID");
        } else {

            try {
                if (jDateChooser1.getDate().equals("")) {
                    JOptionPane.showMessageDialog(null, "You Must choose Return Date");
                } else {

                    try {

                        ResultSet rs = DB.myConnection().createStatement().executeQuery("select * from members where MemberID='" + jTextField2.getText() + "'");
                        while (rs.next()) {
                            MID = rs.getString("MemberID");
                            MemberName = rs.getString("MemberFirstName") + " " + rs.getString("MemberMiddleName") + " " + rs.getString("MemberSurname");
                            System.out.println(MID);
                        }

                    } catch (Exception e) {
                    }
                    if (MID.equals("no")) {
                        JOptionPane.showMessageDialog(null, "No such Member ID");
                        jTextField2.setText("");
                        jTextField2.grabFocus();
                    } else {
                        try {

                            ResultSet rs = DB.myConnection().createStatement().executeQuery("select * from book where BookID='" + jTextField3.getText() + "'");
                            while (rs.next()) {
                                BID = rs.getString("BookID");
                                System.out.println("BookID " + BID + "@ line 309");
                                BookName = rs.getString("BookName");
                            }

                        } catch (Exception e) {
                            System.out.println("exception 291 Issue a book");
                        }
                        if (BID.equals("no")) {
                            JOptionPane.showMessageDialog(null, "No such Book ID");
                            jTextField3.setText("");
                            jTextField3.grabFocus();
                        } else {
                            //------------------Check Book limit----------------
                            String b = "0";
                            int a = 0;
                            try {

                                ResultSet brs = DB.myConnection().createStatement().executeQuery("select * from main");
                                while (brs.next()) {
                                    b = brs.getString("No");
                                }

                            } catch (Exception e) {
                                System.out.println("exception @ Issue a book 332");
                            }

                            //-------------------------------------------------
                            for (int n = 0; n < jTable1.getRowCount(); n++) {
                                System.out.println("jTable1.getValueAt(n, 1).toString() = " + jTable1.getValueAt(n, 1).toString());
                                if (MID.equals(jTable1.getValueAt(n, 1).toString())) {
                                    a++;
                                }
                            }
                            System.out.println("a= " + a + " b= " + b);
                            if (a > Integer.parseInt(b)) {
                                JOptionPane.showMessageDialog(this, "You can't Issue this book \nStudent Book limit Exceeded.", "Integrity error", JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                            if (checkQty()) {

                                Vector member = new Vector();

                                member.add(jTextField1.getText());
                                member.add(MID);
                                member.add(MemberName);
                                member.add(BID);
                                member.add(BookName);
                                member.add(jLabel10.getText());
                                String date[] = jDateChooser1.getDate().toString().split(" ");

                                if (date[1].equals("Jan")) {
                                    date[1] = "01";
                                } else if (date[1].equals("Feb")) {
                                    date[1] = "02";
                                } else if (date[1].equals("Mar")) {
                                    date[1] = "03";
                                } else if (date[1].equals("Apr")) {
                                    date[1] = "04";
                                } else if (date[1].equals("May")) {
                                    date[1] = "05";
                                } else if (date[1].equals("Jun")) {
                                    date[1] = "06";
                                } else if (date[1].equals("Jul")) {
                                    date[1] = "07";
                                } else if (date[1].equals("Aug")) {
                                    date[1] = "08";
                                } else if (date[1].equals("Sep")) {
                                    date[1] = "09";
                                } else if (date[1].equals("Oct")) {
                                    date[1] = "10";
                                } else if (date[1].equals("Nov")) {
                                    date[1] = "11";
                                } else if (date[1].equals("Dec")) {
                                    date[1] = "12";
                                }
                                String ddate = date[5] + "-" + date[1] + "-" + date[2];
                                member.add(ddate);
                                dft.addRow(member);
                                try {

                                    DB.myConnection().createStatement().executeUpdate("insert into borrowedbooks values('" + MID + "','" + BID + "','" + jLabel8.getText() + "','" + jLabel10.getText() + "','" + ddate + "','" + jTextField1.getText() + "')");
                                } catch (Exception e) {
                                }
                                try {

                                    DB.myConnection().createStatement().executeUpdate("Update book set AvailableQuentity=AvailableQuentity-1 where BookID='" + jTextField3.getText() + "'");

                                } catch (Exception e) {
                                }
                                jTextField2.setText("");
                                jTextField3.setText("");
                                jDateChooser1.cleanup();
                                jTextField2.grabFocus();
                            } else {
                                JOptionPane.showMessageDialog(null, "Stock doesn't have enough books\n to provide this request ");
                            }

                        }
                    }

                }
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "You Must choose Return Date");

            }
        }
        try {

            DB.myConnection().createStatement().executeUpdate("update borroewdid set BID=BID+1");
            ResultSet rs = DB.myConnection().createStatement().executeQuery("select max(BID) from borroewdid");
            while (rs.next()) {
                max = rs.getInt(1);
                id = ++max;
                jTextField1.setText(Integer.toString(id));

                System.out.println("Max = " + max + " ID = " + id);
            }
        } catch (Exception e) {
        }
    }
    MID = "no";
    BID = "no";
}//GEN-LAST:event_jButton1ActionPerformed

private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jTextField2ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
